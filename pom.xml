<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>snerble.minecraft.plugin</groupId>
	<artifactId>SnerbleUtils</artifactId>
	<version>3.2.1</version>
	<name>SnerbleUtils</name>
	<description>Contains various utilities for spigot servers</description>
	<build>
		<sourceDirectory>src</sourceDirectory>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<resources>
						<resource>
							<directory>.</directory>
							<includes>
								<include>plugin.yml</include>
							</includes>
						</resource>
					</resources>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>3.2.4</version>
				<configuration>
					<shadedArtifactAttached>true</shadedArtifactAttached>
				</configuration>
			</plugin>
			<!--
			Investigate the addjars-maven-plugin from com.googlecode.addjars-maven-plugin
			in order to include possible future submodules from this plugin when it eventually
			splits into submodules. (Or just use the plugin for local referenced .jar files)
			Source: https://code.google.com/archive/p/addjars-maven-plugin/wikis/UsagePage.wiki
			
			Or don't. It may be possible to include a plugin.yml for each submodule (shards like
			core, treecutter, autotorch, etc), and then add a dependency to that submodule in the
			plugin.yml of the other submodule that depends on it. With any luck the spigot
			classloader lets me reference classes from other installed plugins.
			
			Finally, take a crash-course on pom.xml files so that you can actually use maven
			effectively. Spamming a maven command untill it stops showing errors gets tiresome.
			If you can, try to set up a .yml build pipeline so that you can publish .jar
			releases more easily.
			-->
		</plugins>
	</build>

	<dependencies>
		<dependency>
			<groupId>org.reflections</groupId>
			<artifactId>reflections</artifactId>
			<version>0.9.12</version>
		</dependency>
	</dependencies>
</project>